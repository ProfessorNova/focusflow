
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `PasswordResetSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model PasswordResetSession
 * 
 */
export type PasswordResetSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$PasswordResetSessionPayload>

export type AggregatePasswordResetSession = {
  _count: PasswordResetSessionCountAggregateOutputType | null
  _avg: PasswordResetSessionAvgAggregateOutputType | null
  _sum: PasswordResetSessionSumAggregateOutputType | null
  _min: PasswordResetSessionMinAggregateOutputType | null
  _max: PasswordResetSessionMaxAggregateOutputType | null
}

export type PasswordResetSessionAvgAggregateOutputType = {
  userId: number | null
}

export type PasswordResetSessionSumAggregateOutputType = {
  userId: number | null
}

export type PasswordResetSessionMinAggregateOutputType = {
  id: string | null
  userId: number | null
  email: string | null
  code: string | null
  expiresAt: Date | null
  emailVerified: boolean | null
  twoFactorVerified: boolean | null
}

export type PasswordResetSessionMaxAggregateOutputType = {
  id: string | null
  userId: number | null
  email: string | null
  code: string | null
  expiresAt: Date | null
  emailVerified: boolean | null
  twoFactorVerified: boolean | null
}

export type PasswordResetSessionCountAggregateOutputType = {
  id: number
  userId: number
  email: number
  code: number
  expiresAt: number
  emailVerified: number
  twoFactorVerified: number
  _all: number
}


export type PasswordResetSessionAvgAggregateInputType = {
  userId?: true
}

export type PasswordResetSessionSumAggregateInputType = {
  userId?: true
}

export type PasswordResetSessionMinAggregateInputType = {
  id?: true
  userId?: true
  email?: true
  code?: true
  expiresAt?: true
  emailVerified?: true
  twoFactorVerified?: true
}

export type PasswordResetSessionMaxAggregateInputType = {
  id?: true
  userId?: true
  email?: true
  code?: true
  expiresAt?: true
  emailVerified?: true
  twoFactorVerified?: true
}

export type PasswordResetSessionCountAggregateInputType = {
  id?: true
  userId?: true
  email?: true
  code?: true
  expiresAt?: true
  emailVerified?: true
  twoFactorVerified?: true
  _all?: true
}

export type PasswordResetSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PasswordResetSession to aggregate.
   */
  where?: Prisma.PasswordResetSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PasswordResetSessions to fetch.
   */
  orderBy?: Prisma.PasswordResetSessionOrderByWithRelationInput | Prisma.PasswordResetSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PasswordResetSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PasswordResetSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PasswordResetSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PasswordResetSessions
  **/
  _count?: true | PasswordResetSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PasswordResetSessionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PasswordResetSessionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PasswordResetSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PasswordResetSessionMaxAggregateInputType
}

export type GetPasswordResetSessionAggregateType<T extends PasswordResetSessionAggregateArgs> = {
      [P in keyof T & keyof AggregatePasswordResetSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePasswordResetSession[P]>
    : Prisma.GetScalarType<T[P], AggregatePasswordResetSession[P]>
}




export type PasswordResetSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PasswordResetSessionWhereInput
  orderBy?: Prisma.PasswordResetSessionOrderByWithAggregationInput | Prisma.PasswordResetSessionOrderByWithAggregationInput[]
  by: Prisma.PasswordResetSessionScalarFieldEnum[] | Prisma.PasswordResetSessionScalarFieldEnum
  having?: Prisma.PasswordResetSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PasswordResetSessionCountAggregateInputType | true
  _avg?: PasswordResetSessionAvgAggregateInputType
  _sum?: PasswordResetSessionSumAggregateInputType
  _min?: PasswordResetSessionMinAggregateInputType
  _max?: PasswordResetSessionMaxAggregateInputType
}

export type PasswordResetSessionGroupByOutputType = {
  id: string
  userId: number
  email: string
  code: string
  expiresAt: Date
  emailVerified: boolean
  twoFactorVerified: boolean
  _count: PasswordResetSessionCountAggregateOutputType | null
  _avg: PasswordResetSessionAvgAggregateOutputType | null
  _sum: PasswordResetSessionSumAggregateOutputType | null
  _min: PasswordResetSessionMinAggregateOutputType | null
  _max: PasswordResetSessionMaxAggregateOutputType | null
}

type GetPasswordResetSessionGroupByPayload<T extends PasswordResetSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PasswordResetSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PasswordResetSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PasswordResetSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PasswordResetSessionGroupByOutputType[P]>
      }
    >
  > 



export type PasswordResetSessionWhereInput = {
  AND?: Prisma.PasswordResetSessionWhereInput | Prisma.PasswordResetSessionWhereInput[]
  OR?: Prisma.PasswordResetSessionWhereInput[]
  NOT?: Prisma.PasswordResetSessionWhereInput | Prisma.PasswordResetSessionWhereInput[]
  id?: Prisma.StringFilter<"PasswordResetSession"> | string
  userId?: Prisma.IntFilter<"PasswordResetSession"> | number
  email?: Prisma.StringFilter<"PasswordResetSession"> | string
  code?: Prisma.StringFilter<"PasswordResetSession"> | string
  expiresAt?: Prisma.DateTimeFilter<"PasswordResetSession"> | Date | string
  emailVerified?: Prisma.BoolFilter<"PasswordResetSession"> | boolean
  twoFactorVerified?: Prisma.BoolFilter<"PasswordResetSession"> | boolean
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type PasswordResetSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  email?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  emailVerified?: Prisma.SortOrder
  twoFactorVerified?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type PasswordResetSessionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PasswordResetSessionWhereInput | Prisma.PasswordResetSessionWhereInput[]
  OR?: Prisma.PasswordResetSessionWhereInput[]
  NOT?: Prisma.PasswordResetSessionWhereInput | Prisma.PasswordResetSessionWhereInput[]
  userId?: Prisma.IntFilter<"PasswordResetSession"> | number
  email?: Prisma.StringFilter<"PasswordResetSession"> | string
  code?: Prisma.StringFilter<"PasswordResetSession"> | string
  expiresAt?: Prisma.DateTimeFilter<"PasswordResetSession"> | Date | string
  emailVerified?: Prisma.BoolFilter<"PasswordResetSession"> | boolean
  twoFactorVerified?: Prisma.BoolFilter<"PasswordResetSession"> | boolean
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type PasswordResetSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  email?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  emailVerified?: Prisma.SortOrder
  twoFactorVerified?: Prisma.SortOrder
  _count?: Prisma.PasswordResetSessionCountOrderByAggregateInput
  _avg?: Prisma.PasswordResetSessionAvgOrderByAggregateInput
  _max?: Prisma.PasswordResetSessionMaxOrderByAggregateInput
  _min?: Prisma.PasswordResetSessionMinOrderByAggregateInput
  _sum?: Prisma.PasswordResetSessionSumOrderByAggregateInput
}

export type PasswordResetSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.PasswordResetSessionScalarWhereWithAggregatesInput | Prisma.PasswordResetSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.PasswordResetSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PasswordResetSessionScalarWhereWithAggregatesInput | Prisma.PasswordResetSessionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PasswordResetSession"> | string
  userId?: Prisma.IntWithAggregatesFilter<"PasswordResetSession"> | number
  email?: Prisma.StringWithAggregatesFilter<"PasswordResetSession"> | string
  code?: Prisma.StringWithAggregatesFilter<"PasswordResetSession"> | string
  expiresAt?: Prisma.DateTimeWithAggregatesFilter<"PasswordResetSession"> | Date | string
  emailVerified?: Prisma.BoolWithAggregatesFilter<"PasswordResetSession"> | boolean
  twoFactorVerified?: Prisma.BoolWithAggregatesFilter<"PasswordResetSession"> | boolean
}

export type PasswordResetSessionCreateInput = {
  id: string
  email: string
  code: string
  expiresAt: Date | string
  emailVerified?: boolean
  twoFactorVerified?: boolean
  user: Prisma.UserCreateNestedOneWithoutPasswordResetSessionsInput
}

export type PasswordResetSessionUncheckedCreateInput = {
  id: string
  userId: number
  email: string
  code: string
  expiresAt: Date | string
  emailVerified?: boolean
  twoFactorVerified?: boolean
}

export type PasswordResetSessionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  twoFactorVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  user?: Prisma.UserUpdateOneRequiredWithoutPasswordResetSessionsNestedInput
}

export type PasswordResetSessionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  twoFactorVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PasswordResetSessionCreateManyInput = {
  id: string
  userId: number
  email: string
  code: string
  expiresAt: Date | string
  emailVerified?: boolean
  twoFactorVerified?: boolean
}

export type PasswordResetSessionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  twoFactorVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PasswordResetSessionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  twoFactorVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PasswordResetSessionListRelationFilter = {
  every?: Prisma.PasswordResetSessionWhereInput
  some?: Prisma.PasswordResetSessionWhereInput
  none?: Prisma.PasswordResetSessionWhereInput
}

export type PasswordResetSessionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PasswordResetSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  email?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  emailVerified?: Prisma.SortOrder
  twoFactorVerified?: Prisma.SortOrder
}

export type PasswordResetSessionAvgOrderByAggregateInput = {
  userId?: Prisma.SortOrder
}

export type PasswordResetSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  email?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  emailVerified?: Prisma.SortOrder
  twoFactorVerified?: Prisma.SortOrder
}

export type PasswordResetSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  email?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  emailVerified?: Prisma.SortOrder
  twoFactorVerified?: Prisma.SortOrder
}

export type PasswordResetSessionSumOrderByAggregateInput = {
  userId?: Prisma.SortOrder
}

export type PasswordResetSessionCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PasswordResetSessionCreateWithoutUserInput, Prisma.PasswordResetSessionUncheckedCreateWithoutUserInput> | Prisma.PasswordResetSessionCreateWithoutUserInput[] | Prisma.PasswordResetSessionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PasswordResetSessionCreateOrConnectWithoutUserInput | Prisma.PasswordResetSessionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PasswordResetSessionCreateManyUserInputEnvelope
  connect?: Prisma.PasswordResetSessionWhereUniqueInput | Prisma.PasswordResetSessionWhereUniqueInput[]
}

export type PasswordResetSessionUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PasswordResetSessionCreateWithoutUserInput, Prisma.PasswordResetSessionUncheckedCreateWithoutUserInput> | Prisma.PasswordResetSessionCreateWithoutUserInput[] | Prisma.PasswordResetSessionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PasswordResetSessionCreateOrConnectWithoutUserInput | Prisma.PasswordResetSessionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PasswordResetSessionCreateManyUserInputEnvelope
  connect?: Prisma.PasswordResetSessionWhereUniqueInput | Prisma.PasswordResetSessionWhereUniqueInput[]
}

export type PasswordResetSessionUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PasswordResetSessionCreateWithoutUserInput, Prisma.PasswordResetSessionUncheckedCreateWithoutUserInput> | Prisma.PasswordResetSessionCreateWithoutUserInput[] | Prisma.PasswordResetSessionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PasswordResetSessionCreateOrConnectWithoutUserInput | Prisma.PasswordResetSessionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PasswordResetSessionUpsertWithWhereUniqueWithoutUserInput | Prisma.PasswordResetSessionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PasswordResetSessionCreateManyUserInputEnvelope
  set?: Prisma.PasswordResetSessionWhereUniqueInput | Prisma.PasswordResetSessionWhereUniqueInput[]
  disconnect?: Prisma.PasswordResetSessionWhereUniqueInput | Prisma.PasswordResetSessionWhereUniqueInput[]
  delete?: Prisma.PasswordResetSessionWhereUniqueInput | Prisma.PasswordResetSessionWhereUniqueInput[]
  connect?: Prisma.PasswordResetSessionWhereUniqueInput | Prisma.PasswordResetSessionWhereUniqueInput[]
  update?: Prisma.PasswordResetSessionUpdateWithWhereUniqueWithoutUserInput | Prisma.PasswordResetSessionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PasswordResetSessionUpdateManyWithWhereWithoutUserInput | Prisma.PasswordResetSessionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PasswordResetSessionScalarWhereInput | Prisma.PasswordResetSessionScalarWhereInput[]
}

export type PasswordResetSessionUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PasswordResetSessionCreateWithoutUserInput, Prisma.PasswordResetSessionUncheckedCreateWithoutUserInput> | Prisma.PasswordResetSessionCreateWithoutUserInput[] | Prisma.PasswordResetSessionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PasswordResetSessionCreateOrConnectWithoutUserInput | Prisma.PasswordResetSessionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PasswordResetSessionUpsertWithWhereUniqueWithoutUserInput | Prisma.PasswordResetSessionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PasswordResetSessionCreateManyUserInputEnvelope
  set?: Prisma.PasswordResetSessionWhereUniqueInput | Prisma.PasswordResetSessionWhereUniqueInput[]
  disconnect?: Prisma.PasswordResetSessionWhereUniqueInput | Prisma.PasswordResetSessionWhereUniqueInput[]
  delete?: Prisma.PasswordResetSessionWhereUniqueInput | Prisma.PasswordResetSessionWhereUniqueInput[]
  connect?: Prisma.PasswordResetSessionWhereUniqueInput | Prisma.PasswordResetSessionWhereUniqueInput[]
  update?: Prisma.PasswordResetSessionUpdateWithWhereUniqueWithoutUserInput | Prisma.PasswordResetSessionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PasswordResetSessionUpdateManyWithWhereWithoutUserInput | Prisma.PasswordResetSessionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PasswordResetSessionScalarWhereInput | Prisma.PasswordResetSessionScalarWhereInput[]
}

export type PasswordResetSessionCreateWithoutUserInput = {
  id: string
  email: string
  code: string
  expiresAt: Date | string
  emailVerified?: boolean
  twoFactorVerified?: boolean
}

export type PasswordResetSessionUncheckedCreateWithoutUserInput = {
  id: string
  email: string
  code: string
  expiresAt: Date | string
  emailVerified?: boolean
  twoFactorVerified?: boolean
}

export type PasswordResetSessionCreateOrConnectWithoutUserInput = {
  where: Prisma.PasswordResetSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.PasswordResetSessionCreateWithoutUserInput, Prisma.PasswordResetSessionUncheckedCreateWithoutUserInput>
}

export type PasswordResetSessionCreateManyUserInputEnvelope = {
  data: Prisma.PasswordResetSessionCreateManyUserInput | Prisma.PasswordResetSessionCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type PasswordResetSessionUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.PasswordResetSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.PasswordResetSessionUpdateWithoutUserInput, Prisma.PasswordResetSessionUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PasswordResetSessionCreateWithoutUserInput, Prisma.PasswordResetSessionUncheckedCreateWithoutUserInput>
}

export type PasswordResetSessionUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.PasswordResetSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.PasswordResetSessionUpdateWithoutUserInput, Prisma.PasswordResetSessionUncheckedUpdateWithoutUserInput>
}

export type PasswordResetSessionUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.PasswordResetSessionScalarWhereInput
  data: Prisma.XOR<Prisma.PasswordResetSessionUpdateManyMutationInput, Prisma.PasswordResetSessionUncheckedUpdateManyWithoutUserInput>
}

export type PasswordResetSessionScalarWhereInput = {
  AND?: Prisma.PasswordResetSessionScalarWhereInput | Prisma.PasswordResetSessionScalarWhereInput[]
  OR?: Prisma.PasswordResetSessionScalarWhereInput[]
  NOT?: Prisma.PasswordResetSessionScalarWhereInput | Prisma.PasswordResetSessionScalarWhereInput[]
  id?: Prisma.StringFilter<"PasswordResetSession"> | string
  userId?: Prisma.IntFilter<"PasswordResetSession"> | number
  email?: Prisma.StringFilter<"PasswordResetSession"> | string
  code?: Prisma.StringFilter<"PasswordResetSession"> | string
  expiresAt?: Prisma.DateTimeFilter<"PasswordResetSession"> | Date | string
  emailVerified?: Prisma.BoolFilter<"PasswordResetSession"> | boolean
  twoFactorVerified?: Prisma.BoolFilter<"PasswordResetSession"> | boolean
}

export type PasswordResetSessionCreateManyUserInput = {
  id: string
  email: string
  code: string
  expiresAt: Date | string
  emailVerified?: boolean
  twoFactorVerified?: boolean
}

export type PasswordResetSessionUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  twoFactorVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PasswordResetSessionUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  twoFactorVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PasswordResetSessionUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  emailVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  twoFactorVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type PasswordResetSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  email?: boolean
  code?: boolean
  expiresAt?: boolean
  emailVerified?: boolean
  twoFactorVerified?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["passwordResetSession"]>

export type PasswordResetSessionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  email?: boolean
  code?: boolean
  expiresAt?: boolean
  emailVerified?: boolean
  twoFactorVerified?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["passwordResetSession"]>

export type PasswordResetSessionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  email?: boolean
  code?: boolean
  expiresAt?: boolean
  emailVerified?: boolean
  twoFactorVerified?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["passwordResetSession"]>

export type PasswordResetSessionSelectScalar = {
  id?: boolean
  userId?: boolean
  email?: boolean
  code?: boolean
  expiresAt?: boolean
  emailVerified?: boolean
  twoFactorVerified?: boolean
}

export type PasswordResetSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "email" | "code" | "expiresAt" | "emailVerified" | "twoFactorVerified", ExtArgs["result"]["passwordResetSession"]>
export type PasswordResetSessionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PasswordResetSessionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PasswordResetSessionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $PasswordResetSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PasswordResetSession"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: number
    email: string
    code: string
    expiresAt: Date
    emailVerified: boolean
    twoFactorVerified: boolean
  }, ExtArgs["result"]["passwordResetSession"]>
  composites: {}
}

export type PasswordResetSessionGetPayload<S extends boolean | null | undefined | PasswordResetSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PasswordResetSessionPayload, S>

export type PasswordResetSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PasswordResetSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PasswordResetSessionCountAggregateInputType | true
  }

export interface PasswordResetSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordResetSession'], meta: { name: 'PasswordResetSession' } }
  /**
   * Find zero or one PasswordResetSession that matches the filter.
   * @param {PasswordResetSessionFindUniqueArgs} args - Arguments to find a PasswordResetSession
   * @example
   * // Get one PasswordResetSession
   * const passwordResetSession = await prisma.passwordResetSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PasswordResetSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, PasswordResetSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PasswordResetSessionClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PasswordResetSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PasswordResetSessionFindUniqueOrThrowArgs} args - Arguments to find a PasswordResetSession
   * @example
   * // Get one PasswordResetSession
   * const passwordResetSession = await prisma.passwordResetSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PasswordResetSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PasswordResetSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PasswordResetSessionClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PasswordResetSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetSessionFindFirstArgs} args - Arguments to find a PasswordResetSession
   * @example
   * // Get one PasswordResetSession
   * const passwordResetSession = await prisma.passwordResetSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PasswordResetSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, PasswordResetSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__PasswordResetSessionClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PasswordResetSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetSessionFindFirstOrThrowArgs} args - Arguments to find a PasswordResetSession
   * @example
   * // Get one PasswordResetSession
   * const passwordResetSession = await prisma.passwordResetSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PasswordResetSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PasswordResetSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PasswordResetSessionClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PasswordResetSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PasswordResetSessions
   * const passwordResetSessions = await prisma.passwordResetSession.findMany()
   * 
   * // Get first 10 PasswordResetSessions
   * const passwordResetSessions = await prisma.passwordResetSession.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const passwordResetSessionWithIdOnly = await prisma.passwordResetSession.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PasswordResetSessionFindManyArgs>(args?: Prisma.SelectSubset<T, PasswordResetSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PasswordResetSession.
   * @param {PasswordResetSessionCreateArgs} args - Arguments to create a PasswordResetSession.
   * @example
   * // Create one PasswordResetSession
   * const PasswordResetSession = await prisma.passwordResetSession.create({
   *   data: {
   *     // ... data to create a PasswordResetSession
   *   }
   * })
   * 
   */
  create<T extends PasswordResetSessionCreateArgs>(args: Prisma.SelectSubset<T, PasswordResetSessionCreateArgs<ExtArgs>>): Prisma.Prisma__PasswordResetSessionClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PasswordResetSessions.
   * @param {PasswordResetSessionCreateManyArgs} args - Arguments to create many PasswordResetSessions.
   * @example
   * // Create many PasswordResetSessions
   * const passwordResetSession = await prisma.passwordResetSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PasswordResetSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, PasswordResetSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PasswordResetSessions and returns the data saved in the database.
   * @param {PasswordResetSessionCreateManyAndReturnArgs} args - Arguments to create many PasswordResetSessions.
   * @example
   * // Create many PasswordResetSessions
   * const passwordResetSession = await prisma.passwordResetSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PasswordResetSessions and only return the `id`
   * const passwordResetSessionWithIdOnly = await prisma.passwordResetSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PasswordResetSessionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PasswordResetSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PasswordResetSession.
   * @param {PasswordResetSessionDeleteArgs} args - Arguments to delete one PasswordResetSession.
   * @example
   * // Delete one PasswordResetSession
   * const PasswordResetSession = await prisma.passwordResetSession.delete({
   *   where: {
   *     // ... filter to delete one PasswordResetSession
   *   }
   * })
   * 
   */
  delete<T extends PasswordResetSessionDeleteArgs>(args: Prisma.SelectSubset<T, PasswordResetSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__PasswordResetSessionClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PasswordResetSession.
   * @param {PasswordResetSessionUpdateArgs} args - Arguments to update one PasswordResetSession.
   * @example
   * // Update one PasswordResetSession
   * const passwordResetSession = await prisma.passwordResetSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PasswordResetSessionUpdateArgs>(args: Prisma.SelectSubset<T, PasswordResetSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__PasswordResetSessionClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PasswordResetSessions.
   * @param {PasswordResetSessionDeleteManyArgs} args - Arguments to filter PasswordResetSessions to delete.
   * @example
   * // Delete a few PasswordResetSessions
   * const { count } = await prisma.passwordResetSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PasswordResetSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, PasswordResetSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PasswordResetSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PasswordResetSessions
   * const passwordResetSession = await prisma.passwordResetSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PasswordResetSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, PasswordResetSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PasswordResetSessions and returns the data updated in the database.
   * @param {PasswordResetSessionUpdateManyAndReturnArgs} args - Arguments to update many PasswordResetSessions.
   * @example
   * // Update many PasswordResetSessions
   * const passwordResetSession = await prisma.passwordResetSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PasswordResetSessions and only return the `id`
   * const passwordResetSessionWithIdOnly = await prisma.passwordResetSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PasswordResetSessionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PasswordResetSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PasswordResetSession.
   * @param {PasswordResetSessionUpsertArgs} args - Arguments to update or create a PasswordResetSession.
   * @example
   * // Update or create a PasswordResetSession
   * const passwordResetSession = await prisma.passwordResetSession.upsert({
   *   create: {
   *     // ... data to create a PasswordResetSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PasswordResetSession we want to update
   *   }
   * })
   */
  upsert<T extends PasswordResetSessionUpsertArgs>(args: Prisma.SelectSubset<T, PasswordResetSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__PasswordResetSessionClient<runtime.Types.Result.GetResult<Prisma.$PasswordResetSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PasswordResetSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetSessionCountArgs} args - Arguments to filter PasswordResetSessions to count.
   * @example
   * // Count the number of PasswordResetSessions
   * const count = await prisma.passwordResetSession.count({
   *   where: {
   *     // ... the filter for the PasswordResetSessions we want to count
   *   }
   * })
  **/
  count<T extends PasswordResetSessionCountArgs>(
    args?: Prisma.Subset<T, PasswordResetSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PasswordResetSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PasswordResetSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PasswordResetSessionAggregateArgs>(args: Prisma.Subset<T, PasswordResetSessionAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetSessionAggregateType<T>>

  /**
   * Group by PasswordResetSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PasswordResetSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PasswordResetSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PasswordResetSessionGroupByArgs['orderBy'] }
      : { orderBy?: PasswordResetSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PasswordResetSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PasswordResetSession model
 */
readonly fields: PasswordResetSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PasswordResetSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PasswordResetSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PasswordResetSession model
 */
export interface PasswordResetSessionFieldRefs {
  readonly id: Prisma.FieldRef<"PasswordResetSession", 'String'>
  readonly userId: Prisma.FieldRef<"PasswordResetSession", 'Int'>
  readonly email: Prisma.FieldRef<"PasswordResetSession", 'String'>
  readonly code: Prisma.FieldRef<"PasswordResetSession", 'String'>
  readonly expiresAt: Prisma.FieldRef<"PasswordResetSession", 'DateTime'>
  readonly emailVerified: Prisma.FieldRef<"PasswordResetSession", 'Boolean'>
  readonly twoFactorVerified: Prisma.FieldRef<"PasswordResetSession", 'Boolean'>
}
    

// Custom InputTypes
/**
 * PasswordResetSession findUnique
 */
export type PasswordResetSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetSession
   */
  select?: Prisma.PasswordResetSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetSession
   */
  omit?: Prisma.PasswordResetSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordResetSessionInclude<ExtArgs> | null
  /**
   * Filter, which PasswordResetSession to fetch.
   */
  where: Prisma.PasswordResetSessionWhereUniqueInput
}

/**
 * PasswordResetSession findUniqueOrThrow
 */
export type PasswordResetSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetSession
   */
  select?: Prisma.PasswordResetSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetSession
   */
  omit?: Prisma.PasswordResetSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordResetSessionInclude<ExtArgs> | null
  /**
   * Filter, which PasswordResetSession to fetch.
   */
  where: Prisma.PasswordResetSessionWhereUniqueInput
}

/**
 * PasswordResetSession findFirst
 */
export type PasswordResetSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetSession
   */
  select?: Prisma.PasswordResetSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetSession
   */
  omit?: Prisma.PasswordResetSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordResetSessionInclude<ExtArgs> | null
  /**
   * Filter, which PasswordResetSession to fetch.
   */
  where?: Prisma.PasswordResetSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PasswordResetSessions to fetch.
   */
  orderBy?: Prisma.PasswordResetSessionOrderByWithRelationInput | Prisma.PasswordResetSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PasswordResetSessions.
   */
  cursor?: Prisma.PasswordResetSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PasswordResetSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PasswordResetSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PasswordResetSessions.
   */
  distinct?: Prisma.PasswordResetSessionScalarFieldEnum | Prisma.PasswordResetSessionScalarFieldEnum[]
}

/**
 * PasswordResetSession findFirstOrThrow
 */
export type PasswordResetSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetSession
   */
  select?: Prisma.PasswordResetSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetSession
   */
  omit?: Prisma.PasswordResetSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordResetSessionInclude<ExtArgs> | null
  /**
   * Filter, which PasswordResetSession to fetch.
   */
  where?: Prisma.PasswordResetSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PasswordResetSessions to fetch.
   */
  orderBy?: Prisma.PasswordResetSessionOrderByWithRelationInput | Prisma.PasswordResetSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PasswordResetSessions.
   */
  cursor?: Prisma.PasswordResetSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PasswordResetSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PasswordResetSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PasswordResetSessions.
   */
  distinct?: Prisma.PasswordResetSessionScalarFieldEnum | Prisma.PasswordResetSessionScalarFieldEnum[]
}

/**
 * PasswordResetSession findMany
 */
export type PasswordResetSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetSession
   */
  select?: Prisma.PasswordResetSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetSession
   */
  omit?: Prisma.PasswordResetSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordResetSessionInclude<ExtArgs> | null
  /**
   * Filter, which PasswordResetSessions to fetch.
   */
  where?: Prisma.PasswordResetSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PasswordResetSessions to fetch.
   */
  orderBy?: Prisma.PasswordResetSessionOrderByWithRelationInput | Prisma.PasswordResetSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PasswordResetSessions.
   */
  cursor?: Prisma.PasswordResetSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PasswordResetSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PasswordResetSessions.
   */
  skip?: number
  distinct?: Prisma.PasswordResetSessionScalarFieldEnum | Prisma.PasswordResetSessionScalarFieldEnum[]
}

/**
 * PasswordResetSession create
 */
export type PasswordResetSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetSession
   */
  select?: Prisma.PasswordResetSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetSession
   */
  omit?: Prisma.PasswordResetSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordResetSessionInclude<ExtArgs> | null
  /**
   * The data needed to create a PasswordResetSession.
   */
  data: Prisma.XOR<Prisma.PasswordResetSessionCreateInput, Prisma.PasswordResetSessionUncheckedCreateInput>
}

/**
 * PasswordResetSession createMany
 */
export type PasswordResetSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PasswordResetSessions.
   */
  data: Prisma.PasswordResetSessionCreateManyInput | Prisma.PasswordResetSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PasswordResetSession createManyAndReturn
 */
export type PasswordResetSessionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetSession
   */
  select?: Prisma.PasswordResetSessionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetSession
   */
  omit?: Prisma.PasswordResetSessionOmit<ExtArgs> | null
  /**
   * The data used to create many PasswordResetSessions.
   */
  data: Prisma.PasswordResetSessionCreateManyInput | Prisma.PasswordResetSessionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordResetSessionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PasswordResetSession update
 */
export type PasswordResetSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetSession
   */
  select?: Prisma.PasswordResetSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetSession
   */
  omit?: Prisma.PasswordResetSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordResetSessionInclude<ExtArgs> | null
  /**
   * The data needed to update a PasswordResetSession.
   */
  data: Prisma.XOR<Prisma.PasswordResetSessionUpdateInput, Prisma.PasswordResetSessionUncheckedUpdateInput>
  /**
   * Choose, which PasswordResetSession to update.
   */
  where: Prisma.PasswordResetSessionWhereUniqueInput
}

/**
 * PasswordResetSession updateMany
 */
export type PasswordResetSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PasswordResetSessions.
   */
  data: Prisma.XOR<Prisma.PasswordResetSessionUpdateManyMutationInput, Prisma.PasswordResetSessionUncheckedUpdateManyInput>
  /**
   * Filter which PasswordResetSessions to update
   */
  where?: Prisma.PasswordResetSessionWhereInput
  /**
   * Limit how many PasswordResetSessions to update.
   */
  limit?: number
}

/**
 * PasswordResetSession updateManyAndReturn
 */
export type PasswordResetSessionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetSession
   */
  select?: Prisma.PasswordResetSessionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetSession
   */
  omit?: Prisma.PasswordResetSessionOmit<ExtArgs> | null
  /**
   * The data used to update PasswordResetSessions.
   */
  data: Prisma.XOR<Prisma.PasswordResetSessionUpdateManyMutationInput, Prisma.PasswordResetSessionUncheckedUpdateManyInput>
  /**
   * Filter which PasswordResetSessions to update
   */
  where?: Prisma.PasswordResetSessionWhereInput
  /**
   * Limit how many PasswordResetSessions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordResetSessionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PasswordResetSession upsert
 */
export type PasswordResetSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetSession
   */
  select?: Prisma.PasswordResetSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetSession
   */
  omit?: Prisma.PasswordResetSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordResetSessionInclude<ExtArgs> | null
  /**
   * The filter to search for the PasswordResetSession to update in case it exists.
   */
  where: Prisma.PasswordResetSessionWhereUniqueInput
  /**
   * In case the PasswordResetSession found by the `where` argument doesn't exist, create a new PasswordResetSession with this data.
   */
  create: Prisma.XOR<Prisma.PasswordResetSessionCreateInput, Prisma.PasswordResetSessionUncheckedCreateInput>
  /**
   * In case the PasswordResetSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PasswordResetSessionUpdateInput, Prisma.PasswordResetSessionUncheckedUpdateInput>
}

/**
 * PasswordResetSession delete
 */
export type PasswordResetSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetSession
   */
  select?: Prisma.PasswordResetSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetSession
   */
  omit?: Prisma.PasswordResetSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordResetSessionInclude<ExtArgs> | null
  /**
   * Filter which PasswordResetSession to delete.
   */
  where: Prisma.PasswordResetSessionWhereUniqueInput
}

/**
 * PasswordResetSession deleteMany
 */
export type PasswordResetSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PasswordResetSessions to delete
   */
  where?: Prisma.PasswordResetSessionWhereInput
  /**
   * Limit how many PasswordResetSessions to delete.
   */
  limit?: number
}

/**
 * PasswordResetSession without action
 */
export type PasswordResetSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PasswordResetSession
   */
  select?: Prisma.PasswordResetSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PasswordResetSession
   */
  omit?: Prisma.PasswordResetSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PasswordResetSessionInclude<ExtArgs> | null
}
