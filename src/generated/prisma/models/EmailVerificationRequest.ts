
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `EmailVerificationRequest` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model EmailVerificationRequest
 * 
 */
export type EmailVerificationRequestModel = runtime.Types.Result.DefaultSelection<Prisma.$EmailVerificationRequestPayload>

export type AggregateEmailVerificationRequest = {
  _count: EmailVerificationRequestCountAggregateOutputType | null
  _avg: EmailVerificationRequestAvgAggregateOutputType | null
  _sum: EmailVerificationRequestSumAggregateOutputType | null
  _min: EmailVerificationRequestMinAggregateOutputType | null
  _max: EmailVerificationRequestMaxAggregateOutputType | null
}

export type EmailVerificationRequestAvgAggregateOutputType = {
  userId: number | null
}

export type EmailVerificationRequestSumAggregateOutputType = {
  userId: number | null
}

export type EmailVerificationRequestMinAggregateOutputType = {
  id: string | null
  userId: number | null
  email: string | null
  code: string | null
  expiresAt: Date | null
}

export type EmailVerificationRequestMaxAggregateOutputType = {
  id: string | null
  userId: number | null
  email: string | null
  code: string | null
  expiresAt: Date | null
}

export type EmailVerificationRequestCountAggregateOutputType = {
  id: number
  userId: number
  email: number
  code: number
  expiresAt: number
  _all: number
}


export type EmailVerificationRequestAvgAggregateInputType = {
  userId?: true
}

export type EmailVerificationRequestSumAggregateInputType = {
  userId?: true
}

export type EmailVerificationRequestMinAggregateInputType = {
  id?: true
  userId?: true
  email?: true
  code?: true
  expiresAt?: true
}

export type EmailVerificationRequestMaxAggregateInputType = {
  id?: true
  userId?: true
  email?: true
  code?: true
  expiresAt?: true
}

export type EmailVerificationRequestCountAggregateInputType = {
  id?: true
  userId?: true
  email?: true
  code?: true
  expiresAt?: true
  _all?: true
}

export type EmailVerificationRequestAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailVerificationRequest to aggregate.
   */
  where?: Prisma.EmailVerificationRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailVerificationRequests to fetch.
   */
  orderBy?: Prisma.EmailVerificationRequestOrderByWithRelationInput | Prisma.EmailVerificationRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EmailVerificationRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailVerificationRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailVerificationRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EmailVerificationRequests
  **/
  _count?: true | EmailVerificationRequestCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EmailVerificationRequestAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EmailVerificationRequestSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmailVerificationRequestMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmailVerificationRequestMaxAggregateInputType
}

export type GetEmailVerificationRequestAggregateType<T extends EmailVerificationRequestAggregateArgs> = {
      [P in keyof T & keyof AggregateEmailVerificationRequest]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmailVerificationRequest[P]>
    : Prisma.GetScalarType<T[P], AggregateEmailVerificationRequest[P]>
}




export type EmailVerificationRequestGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmailVerificationRequestWhereInput
  orderBy?: Prisma.EmailVerificationRequestOrderByWithAggregationInput | Prisma.EmailVerificationRequestOrderByWithAggregationInput[]
  by: Prisma.EmailVerificationRequestScalarFieldEnum[] | Prisma.EmailVerificationRequestScalarFieldEnum
  having?: Prisma.EmailVerificationRequestScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmailVerificationRequestCountAggregateInputType | true
  _avg?: EmailVerificationRequestAvgAggregateInputType
  _sum?: EmailVerificationRequestSumAggregateInputType
  _min?: EmailVerificationRequestMinAggregateInputType
  _max?: EmailVerificationRequestMaxAggregateInputType
}

export type EmailVerificationRequestGroupByOutputType = {
  id: string
  userId: number
  email: string
  code: string
  expiresAt: Date
  _count: EmailVerificationRequestCountAggregateOutputType | null
  _avg: EmailVerificationRequestAvgAggregateOutputType | null
  _sum: EmailVerificationRequestSumAggregateOutputType | null
  _min: EmailVerificationRequestMinAggregateOutputType | null
  _max: EmailVerificationRequestMaxAggregateOutputType | null
}

type GetEmailVerificationRequestGroupByPayload<T extends EmailVerificationRequestGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmailVerificationRequestGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmailVerificationRequestGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmailVerificationRequestGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmailVerificationRequestGroupByOutputType[P]>
      }
    >
  > 



export type EmailVerificationRequestWhereInput = {
  AND?: Prisma.EmailVerificationRequestWhereInput | Prisma.EmailVerificationRequestWhereInput[]
  OR?: Prisma.EmailVerificationRequestWhereInput[]
  NOT?: Prisma.EmailVerificationRequestWhereInput | Prisma.EmailVerificationRequestWhereInput[]
  id?: Prisma.StringFilter<"EmailVerificationRequest"> | string
  userId?: Prisma.IntFilter<"EmailVerificationRequest"> | number
  email?: Prisma.StringFilter<"EmailVerificationRequest"> | string
  code?: Prisma.StringFilter<"EmailVerificationRequest"> | string
  expiresAt?: Prisma.DateTimeFilter<"EmailVerificationRequest"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type EmailVerificationRequestOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  email?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type EmailVerificationRequestWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EmailVerificationRequestWhereInput | Prisma.EmailVerificationRequestWhereInput[]
  OR?: Prisma.EmailVerificationRequestWhereInput[]
  NOT?: Prisma.EmailVerificationRequestWhereInput | Prisma.EmailVerificationRequestWhereInput[]
  userId?: Prisma.IntFilter<"EmailVerificationRequest"> | number
  email?: Prisma.StringFilter<"EmailVerificationRequest"> | string
  code?: Prisma.StringFilter<"EmailVerificationRequest"> | string
  expiresAt?: Prisma.DateTimeFilter<"EmailVerificationRequest"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type EmailVerificationRequestOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  email?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  _count?: Prisma.EmailVerificationRequestCountOrderByAggregateInput
  _avg?: Prisma.EmailVerificationRequestAvgOrderByAggregateInput
  _max?: Prisma.EmailVerificationRequestMaxOrderByAggregateInput
  _min?: Prisma.EmailVerificationRequestMinOrderByAggregateInput
  _sum?: Prisma.EmailVerificationRequestSumOrderByAggregateInput
}

export type EmailVerificationRequestScalarWhereWithAggregatesInput = {
  AND?: Prisma.EmailVerificationRequestScalarWhereWithAggregatesInput | Prisma.EmailVerificationRequestScalarWhereWithAggregatesInput[]
  OR?: Prisma.EmailVerificationRequestScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EmailVerificationRequestScalarWhereWithAggregatesInput | Prisma.EmailVerificationRequestScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EmailVerificationRequest"> | string
  userId?: Prisma.IntWithAggregatesFilter<"EmailVerificationRequest"> | number
  email?: Prisma.StringWithAggregatesFilter<"EmailVerificationRequest"> | string
  code?: Prisma.StringWithAggregatesFilter<"EmailVerificationRequest"> | string
  expiresAt?: Prisma.DateTimeWithAggregatesFilter<"EmailVerificationRequest"> | Date | string
}

export type EmailVerificationRequestCreateInput = {
  id: string
  email: string
  code: string
  expiresAt: Date | string
  user: Prisma.UserCreateNestedOneWithoutEmailVerificationReqsInput
}

export type EmailVerificationRequestUncheckedCreateInput = {
  id: string
  userId: number
  email: string
  code: string
  expiresAt: Date | string
}

export type EmailVerificationRequestUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutEmailVerificationReqsNestedInput
}

export type EmailVerificationRequestUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailVerificationRequestCreateManyInput = {
  id: string
  userId: number
  email: string
  code: string
  expiresAt: Date | string
}

export type EmailVerificationRequestUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailVerificationRequestUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailVerificationRequestListRelationFilter = {
  every?: Prisma.EmailVerificationRequestWhereInput
  some?: Prisma.EmailVerificationRequestWhereInput
  none?: Prisma.EmailVerificationRequestWhereInput
}

export type EmailVerificationRequestOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EmailVerificationRequestCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  email?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}

export type EmailVerificationRequestAvgOrderByAggregateInput = {
  userId?: Prisma.SortOrder
}

export type EmailVerificationRequestMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  email?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}

export type EmailVerificationRequestMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  email?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
}

export type EmailVerificationRequestSumOrderByAggregateInput = {
  userId?: Prisma.SortOrder
}

export type EmailVerificationRequestCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.EmailVerificationRequestCreateWithoutUserInput, Prisma.EmailVerificationRequestUncheckedCreateWithoutUserInput> | Prisma.EmailVerificationRequestCreateWithoutUserInput[] | Prisma.EmailVerificationRequestUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EmailVerificationRequestCreateOrConnectWithoutUserInput | Prisma.EmailVerificationRequestCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.EmailVerificationRequestCreateManyUserInputEnvelope
  connect?: Prisma.EmailVerificationRequestWhereUniqueInput | Prisma.EmailVerificationRequestWhereUniqueInput[]
}

export type EmailVerificationRequestUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.EmailVerificationRequestCreateWithoutUserInput, Prisma.EmailVerificationRequestUncheckedCreateWithoutUserInput> | Prisma.EmailVerificationRequestCreateWithoutUserInput[] | Prisma.EmailVerificationRequestUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EmailVerificationRequestCreateOrConnectWithoutUserInput | Prisma.EmailVerificationRequestCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.EmailVerificationRequestCreateManyUserInputEnvelope
  connect?: Prisma.EmailVerificationRequestWhereUniqueInput | Prisma.EmailVerificationRequestWhereUniqueInput[]
}

export type EmailVerificationRequestUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.EmailVerificationRequestCreateWithoutUserInput, Prisma.EmailVerificationRequestUncheckedCreateWithoutUserInput> | Prisma.EmailVerificationRequestCreateWithoutUserInput[] | Prisma.EmailVerificationRequestUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EmailVerificationRequestCreateOrConnectWithoutUserInput | Prisma.EmailVerificationRequestCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.EmailVerificationRequestUpsertWithWhereUniqueWithoutUserInput | Prisma.EmailVerificationRequestUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.EmailVerificationRequestCreateManyUserInputEnvelope
  set?: Prisma.EmailVerificationRequestWhereUniqueInput | Prisma.EmailVerificationRequestWhereUniqueInput[]
  disconnect?: Prisma.EmailVerificationRequestWhereUniqueInput | Prisma.EmailVerificationRequestWhereUniqueInput[]
  delete?: Prisma.EmailVerificationRequestWhereUniqueInput | Prisma.EmailVerificationRequestWhereUniqueInput[]
  connect?: Prisma.EmailVerificationRequestWhereUniqueInput | Prisma.EmailVerificationRequestWhereUniqueInput[]
  update?: Prisma.EmailVerificationRequestUpdateWithWhereUniqueWithoutUserInput | Prisma.EmailVerificationRequestUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.EmailVerificationRequestUpdateManyWithWhereWithoutUserInput | Prisma.EmailVerificationRequestUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.EmailVerificationRequestScalarWhereInput | Prisma.EmailVerificationRequestScalarWhereInput[]
}

export type EmailVerificationRequestUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.EmailVerificationRequestCreateWithoutUserInput, Prisma.EmailVerificationRequestUncheckedCreateWithoutUserInput> | Prisma.EmailVerificationRequestCreateWithoutUserInput[] | Prisma.EmailVerificationRequestUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EmailVerificationRequestCreateOrConnectWithoutUserInput | Prisma.EmailVerificationRequestCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.EmailVerificationRequestUpsertWithWhereUniqueWithoutUserInput | Prisma.EmailVerificationRequestUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.EmailVerificationRequestCreateManyUserInputEnvelope
  set?: Prisma.EmailVerificationRequestWhereUniqueInput | Prisma.EmailVerificationRequestWhereUniqueInput[]
  disconnect?: Prisma.EmailVerificationRequestWhereUniqueInput | Prisma.EmailVerificationRequestWhereUniqueInput[]
  delete?: Prisma.EmailVerificationRequestWhereUniqueInput | Prisma.EmailVerificationRequestWhereUniqueInput[]
  connect?: Prisma.EmailVerificationRequestWhereUniqueInput | Prisma.EmailVerificationRequestWhereUniqueInput[]
  update?: Prisma.EmailVerificationRequestUpdateWithWhereUniqueWithoutUserInput | Prisma.EmailVerificationRequestUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.EmailVerificationRequestUpdateManyWithWhereWithoutUserInput | Prisma.EmailVerificationRequestUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.EmailVerificationRequestScalarWhereInput | Prisma.EmailVerificationRequestScalarWhereInput[]
}

export type EmailVerificationRequestCreateWithoutUserInput = {
  id: string
  email: string
  code: string
  expiresAt: Date | string
}

export type EmailVerificationRequestUncheckedCreateWithoutUserInput = {
  id: string
  email: string
  code: string
  expiresAt: Date | string
}

export type EmailVerificationRequestCreateOrConnectWithoutUserInput = {
  where: Prisma.EmailVerificationRequestWhereUniqueInput
  create: Prisma.XOR<Prisma.EmailVerificationRequestCreateWithoutUserInput, Prisma.EmailVerificationRequestUncheckedCreateWithoutUserInput>
}

export type EmailVerificationRequestCreateManyUserInputEnvelope = {
  data: Prisma.EmailVerificationRequestCreateManyUserInput | Prisma.EmailVerificationRequestCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type EmailVerificationRequestUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.EmailVerificationRequestWhereUniqueInput
  update: Prisma.XOR<Prisma.EmailVerificationRequestUpdateWithoutUserInput, Prisma.EmailVerificationRequestUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.EmailVerificationRequestCreateWithoutUserInput, Prisma.EmailVerificationRequestUncheckedCreateWithoutUserInput>
}

export type EmailVerificationRequestUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.EmailVerificationRequestWhereUniqueInput
  data: Prisma.XOR<Prisma.EmailVerificationRequestUpdateWithoutUserInput, Prisma.EmailVerificationRequestUncheckedUpdateWithoutUserInput>
}

export type EmailVerificationRequestUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.EmailVerificationRequestScalarWhereInput
  data: Prisma.XOR<Prisma.EmailVerificationRequestUpdateManyMutationInput, Prisma.EmailVerificationRequestUncheckedUpdateManyWithoutUserInput>
}

export type EmailVerificationRequestScalarWhereInput = {
  AND?: Prisma.EmailVerificationRequestScalarWhereInput | Prisma.EmailVerificationRequestScalarWhereInput[]
  OR?: Prisma.EmailVerificationRequestScalarWhereInput[]
  NOT?: Prisma.EmailVerificationRequestScalarWhereInput | Prisma.EmailVerificationRequestScalarWhereInput[]
  id?: Prisma.StringFilter<"EmailVerificationRequest"> | string
  userId?: Prisma.IntFilter<"EmailVerificationRequest"> | number
  email?: Prisma.StringFilter<"EmailVerificationRequest"> | string
  code?: Prisma.StringFilter<"EmailVerificationRequest"> | string
  expiresAt?: Prisma.DateTimeFilter<"EmailVerificationRequest"> | Date | string
}

export type EmailVerificationRequestCreateManyUserInput = {
  id: string
  email: string
  code: string
  expiresAt: Date | string
}

export type EmailVerificationRequestUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailVerificationRequestUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailVerificationRequestUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type EmailVerificationRequestSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  email?: boolean
  code?: boolean
  expiresAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailVerificationRequest"]>

export type EmailVerificationRequestSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  email?: boolean
  code?: boolean
  expiresAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailVerificationRequest"]>

export type EmailVerificationRequestSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  email?: boolean
  code?: boolean
  expiresAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailVerificationRequest"]>

export type EmailVerificationRequestSelectScalar = {
  id?: boolean
  userId?: boolean
  email?: boolean
  code?: boolean
  expiresAt?: boolean
}

export type EmailVerificationRequestOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "email" | "code" | "expiresAt", ExtArgs["result"]["emailVerificationRequest"]>
export type EmailVerificationRequestInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type EmailVerificationRequestIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type EmailVerificationRequestIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $EmailVerificationRequestPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EmailVerificationRequest"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: number
    email: string
    code: string
    expiresAt: Date
  }, ExtArgs["result"]["emailVerificationRequest"]>
  composites: {}
}

export type EmailVerificationRequestGetPayload<S extends boolean | null | undefined | EmailVerificationRequestDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmailVerificationRequestPayload, S>

export type EmailVerificationRequestCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EmailVerificationRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EmailVerificationRequestCountAggregateInputType | true
  }

export interface EmailVerificationRequestDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailVerificationRequest'], meta: { name: 'EmailVerificationRequest' } }
  /**
   * Find zero or one EmailVerificationRequest that matches the filter.
   * @param {EmailVerificationRequestFindUniqueArgs} args - Arguments to find a EmailVerificationRequest
   * @example
   * // Get one EmailVerificationRequest
   * const emailVerificationRequest = await prisma.emailVerificationRequest.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmailVerificationRequestFindUniqueArgs>(args: Prisma.SelectSubset<T, EmailVerificationRequestFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationRequestClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EmailVerificationRequest that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmailVerificationRequestFindUniqueOrThrowArgs} args - Arguments to find a EmailVerificationRequest
   * @example
   * // Get one EmailVerificationRequest
   * const emailVerificationRequest = await prisma.emailVerificationRequest.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmailVerificationRequestFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EmailVerificationRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationRequestClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailVerificationRequest that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationRequestFindFirstArgs} args - Arguments to find a EmailVerificationRequest
   * @example
   * // Get one EmailVerificationRequest
   * const emailVerificationRequest = await prisma.emailVerificationRequest.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmailVerificationRequestFindFirstArgs>(args?: Prisma.SelectSubset<T, EmailVerificationRequestFindFirstArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationRequestClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailVerificationRequest that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationRequestFindFirstOrThrowArgs} args - Arguments to find a EmailVerificationRequest
   * @example
   * // Get one EmailVerificationRequest
   * const emailVerificationRequest = await prisma.emailVerificationRequest.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmailVerificationRequestFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EmailVerificationRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationRequestClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EmailVerificationRequests that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationRequestFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EmailVerificationRequests
   * const emailVerificationRequests = await prisma.emailVerificationRequest.findMany()
   * 
   * // Get first 10 EmailVerificationRequests
   * const emailVerificationRequests = await prisma.emailVerificationRequest.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const emailVerificationRequestWithIdOnly = await prisma.emailVerificationRequest.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EmailVerificationRequestFindManyArgs>(args?: Prisma.SelectSubset<T, EmailVerificationRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EmailVerificationRequest.
   * @param {EmailVerificationRequestCreateArgs} args - Arguments to create a EmailVerificationRequest.
   * @example
   * // Create one EmailVerificationRequest
   * const EmailVerificationRequest = await prisma.emailVerificationRequest.create({
   *   data: {
   *     // ... data to create a EmailVerificationRequest
   *   }
   * })
   * 
   */
  create<T extends EmailVerificationRequestCreateArgs>(args: Prisma.SelectSubset<T, EmailVerificationRequestCreateArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationRequestClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EmailVerificationRequests.
   * @param {EmailVerificationRequestCreateManyArgs} args - Arguments to create many EmailVerificationRequests.
   * @example
   * // Create many EmailVerificationRequests
   * const emailVerificationRequest = await prisma.emailVerificationRequest.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EmailVerificationRequestCreateManyArgs>(args?: Prisma.SelectSubset<T, EmailVerificationRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EmailVerificationRequests and returns the data saved in the database.
   * @param {EmailVerificationRequestCreateManyAndReturnArgs} args - Arguments to create many EmailVerificationRequests.
   * @example
   * // Create many EmailVerificationRequests
   * const emailVerificationRequest = await prisma.emailVerificationRequest.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EmailVerificationRequests and only return the `id`
   * const emailVerificationRequestWithIdOnly = await prisma.emailVerificationRequest.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EmailVerificationRequestCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EmailVerificationRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EmailVerificationRequest.
   * @param {EmailVerificationRequestDeleteArgs} args - Arguments to delete one EmailVerificationRequest.
   * @example
   * // Delete one EmailVerificationRequest
   * const EmailVerificationRequest = await prisma.emailVerificationRequest.delete({
   *   where: {
   *     // ... filter to delete one EmailVerificationRequest
   *   }
   * })
   * 
   */
  delete<T extends EmailVerificationRequestDeleteArgs>(args: Prisma.SelectSubset<T, EmailVerificationRequestDeleteArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationRequestClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EmailVerificationRequest.
   * @param {EmailVerificationRequestUpdateArgs} args - Arguments to update one EmailVerificationRequest.
   * @example
   * // Update one EmailVerificationRequest
   * const emailVerificationRequest = await prisma.emailVerificationRequest.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EmailVerificationRequestUpdateArgs>(args: Prisma.SelectSubset<T, EmailVerificationRequestUpdateArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationRequestClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EmailVerificationRequests.
   * @param {EmailVerificationRequestDeleteManyArgs} args - Arguments to filter EmailVerificationRequests to delete.
   * @example
   * // Delete a few EmailVerificationRequests
   * const { count } = await prisma.emailVerificationRequest.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EmailVerificationRequestDeleteManyArgs>(args?: Prisma.SelectSubset<T, EmailVerificationRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailVerificationRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationRequestUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EmailVerificationRequests
   * const emailVerificationRequest = await prisma.emailVerificationRequest.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EmailVerificationRequestUpdateManyArgs>(args: Prisma.SelectSubset<T, EmailVerificationRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailVerificationRequests and returns the data updated in the database.
   * @param {EmailVerificationRequestUpdateManyAndReturnArgs} args - Arguments to update many EmailVerificationRequests.
   * @example
   * // Update many EmailVerificationRequests
   * const emailVerificationRequest = await prisma.emailVerificationRequest.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EmailVerificationRequests and only return the `id`
   * const emailVerificationRequestWithIdOnly = await prisma.emailVerificationRequest.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EmailVerificationRequestUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EmailVerificationRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EmailVerificationRequest.
   * @param {EmailVerificationRequestUpsertArgs} args - Arguments to update or create a EmailVerificationRequest.
   * @example
   * // Update or create a EmailVerificationRequest
   * const emailVerificationRequest = await prisma.emailVerificationRequest.upsert({
   *   create: {
   *     // ... data to create a EmailVerificationRequest
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EmailVerificationRequest we want to update
   *   }
   * })
   */
  upsert<T extends EmailVerificationRequestUpsertArgs>(args: Prisma.SelectSubset<T, EmailVerificationRequestUpsertArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationRequestClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EmailVerificationRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationRequestCountArgs} args - Arguments to filter EmailVerificationRequests to count.
   * @example
   * // Count the number of EmailVerificationRequests
   * const count = await prisma.emailVerificationRequest.count({
   *   where: {
   *     // ... the filter for the EmailVerificationRequests we want to count
   *   }
   * })
  **/
  count<T extends EmailVerificationRequestCountArgs>(
    args?: Prisma.Subset<T, EmailVerificationRequestCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmailVerificationRequestCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EmailVerificationRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmailVerificationRequestAggregateArgs>(args: Prisma.Subset<T, EmailVerificationRequestAggregateArgs>): Prisma.PrismaPromise<GetEmailVerificationRequestAggregateType<T>>

  /**
   * Group by EmailVerificationRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationRequestGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EmailVerificationRequestGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmailVerificationRequestGroupByArgs['orderBy'] }
      : { orderBy?: EmailVerificationRequestGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EmailVerificationRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailVerificationRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EmailVerificationRequest model
 */
readonly fields: EmailVerificationRequestFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EmailVerificationRequest.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmailVerificationRequestClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EmailVerificationRequest model
 */
export interface EmailVerificationRequestFieldRefs {
  readonly id: Prisma.FieldRef<"EmailVerificationRequest", 'String'>
  readonly userId: Prisma.FieldRef<"EmailVerificationRequest", 'Int'>
  readonly email: Prisma.FieldRef<"EmailVerificationRequest", 'String'>
  readonly code: Prisma.FieldRef<"EmailVerificationRequest", 'String'>
  readonly expiresAt: Prisma.FieldRef<"EmailVerificationRequest", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EmailVerificationRequest findUnique
 */
export type EmailVerificationRequestFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerificationRequest
   */
  select?: Prisma.EmailVerificationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerificationRequest
   */
  omit?: Prisma.EmailVerificationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationRequestInclude<ExtArgs> | null
  /**
   * Filter, which EmailVerificationRequest to fetch.
   */
  where: Prisma.EmailVerificationRequestWhereUniqueInput
}

/**
 * EmailVerificationRequest findUniqueOrThrow
 */
export type EmailVerificationRequestFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerificationRequest
   */
  select?: Prisma.EmailVerificationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerificationRequest
   */
  omit?: Prisma.EmailVerificationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationRequestInclude<ExtArgs> | null
  /**
   * Filter, which EmailVerificationRequest to fetch.
   */
  where: Prisma.EmailVerificationRequestWhereUniqueInput
}

/**
 * EmailVerificationRequest findFirst
 */
export type EmailVerificationRequestFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerificationRequest
   */
  select?: Prisma.EmailVerificationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerificationRequest
   */
  omit?: Prisma.EmailVerificationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationRequestInclude<ExtArgs> | null
  /**
   * Filter, which EmailVerificationRequest to fetch.
   */
  where?: Prisma.EmailVerificationRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailVerificationRequests to fetch.
   */
  orderBy?: Prisma.EmailVerificationRequestOrderByWithRelationInput | Prisma.EmailVerificationRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailVerificationRequests.
   */
  cursor?: Prisma.EmailVerificationRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailVerificationRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailVerificationRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailVerificationRequests.
   */
  distinct?: Prisma.EmailVerificationRequestScalarFieldEnum | Prisma.EmailVerificationRequestScalarFieldEnum[]
}

/**
 * EmailVerificationRequest findFirstOrThrow
 */
export type EmailVerificationRequestFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerificationRequest
   */
  select?: Prisma.EmailVerificationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerificationRequest
   */
  omit?: Prisma.EmailVerificationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationRequestInclude<ExtArgs> | null
  /**
   * Filter, which EmailVerificationRequest to fetch.
   */
  where?: Prisma.EmailVerificationRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailVerificationRequests to fetch.
   */
  orderBy?: Prisma.EmailVerificationRequestOrderByWithRelationInput | Prisma.EmailVerificationRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailVerificationRequests.
   */
  cursor?: Prisma.EmailVerificationRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailVerificationRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailVerificationRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailVerificationRequests.
   */
  distinct?: Prisma.EmailVerificationRequestScalarFieldEnum | Prisma.EmailVerificationRequestScalarFieldEnum[]
}

/**
 * EmailVerificationRequest findMany
 */
export type EmailVerificationRequestFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerificationRequest
   */
  select?: Prisma.EmailVerificationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerificationRequest
   */
  omit?: Prisma.EmailVerificationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationRequestInclude<ExtArgs> | null
  /**
   * Filter, which EmailVerificationRequests to fetch.
   */
  where?: Prisma.EmailVerificationRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailVerificationRequests to fetch.
   */
  orderBy?: Prisma.EmailVerificationRequestOrderByWithRelationInput | Prisma.EmailVerificationRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EmailVerificationRequests.
   */
  cursor?: Prisma.EmailVerificationRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailVerificationRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailVerificationRequests.
   */
  skip?: number
  distinct?: Prisma.EmailVerificationRequestScalarFieldEnum | Prisma.EmailVerificationRequestScalarFieldEnum[]
}

/**
 * EmailVerificationRequest create
 */
export type EmailVerificationRequestCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerificationRequest
   */
  select?: Prisma.EmailVerificationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerificationRequest
   */
  omit?: Prisma.EmailVerificationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationRequestInclude<ExtArgs> | null
  /**
   * The data needed to create a EmailVerificationRequest.
   */
  data: Prisma.XOR<Prisma.EmailVerificationRequestCreateInput, Prisma.EmailVerificationRequestUncheckedCreateInput>
}

/**
 * EmailVerificationRequest createMany
 */
export type EmailVerificationRequestCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EmailVerificationRequests.
   */
  data: Prisma.EmailVerificationRequestCreateManyInput | Prisma.EmailVerificationRequestCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EmailVerificationRequest createManyAndReturn
 */
export type EmailVerificationRequestCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerificationRequest
   */
  select?: Prisma.EmailVerificationRequestSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerificationRequest
   */
  omit?: Prisma.EmailVerificationRequestOmit<ExtArgs> | null
  /**
   * The data used to create many EmailVerificationRequests.
   */
  data: Prisma.EmailVerificationRequestCreateManyInput | Prisma.EmailVerificationRequestCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationRequestIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EmailVerificationRequest update
 */
export type EmailVerificationRequestUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerificationRequest
   */
  select?: Prisma.EmailVerificationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerificationRequest
   */
  omit?: Prisma.EmailVerificationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationRequestInclude<ExtArgs> | null
  /**
   * The data needed to update a EmailVerificationRequest.
   */
  data: Prisma.XOR<Prisma.EmailVerificationRequestUpdateInput, Prisma.EmailVerificationRequestUncheckedUpdateInput>
  /**
   * Choose, which EmailVerificationRequest to update.
   */
  where: Prisma.EmailVerificationRequestWhereUniqueInput
}

/**
 * EmailVerificationRequest updateMany
 */
export type EmailVerificationRequestUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EmailVerificationRequests.
   */
  data: Prisma.XOR<Prisma.EmailVerificationRequestUpdateManyMutationInput, Prisma.EmailVerificationRequestUncheckedUpdateManyInput>
  /**
   * Filter which EmailVerificationRequests to update
   */
  where?: Prisma.EmailVerificationRequestWhereInput
  /**
   * Limit how many EmailVerificationRequests to update.
   */
  limit?: number
}

/**
 * EmailVerificationRequest updateManyAndReturn
 */
export type EmailVerificationRequestUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerificationRequest
   */
  select?: Prisma.EmailVerificationRequestSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerificationRequest
   */
  omit?: Prisma.EmailVerificationRequestOmit<ExtArgs> | null
  /**
   * The data used to update EmailVerificationRequests.
   */
  data: Prisma.XOR<Prisma.EmailVerificationRequestUpdateManyMutationInput, Prisma.EmailVerificationRequestUncheckedUpdateManyInput>
  /**
   * Filter which EmailVerificationRequests to update
   */
  where?: Prisma.EmailVerificationRequestWhereInput
  /**
   * Limit how many EmailVerificationRequests to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationRequestIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EmailVerificationRequest upsert
 */
export type EmailVerificationRequestUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerificationRequest
   */
  select?: Prisma.EmailVerificationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerificationRequest
   */
  omit?: Prisma.EmailVerificationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationRequestInclude<ExtArgs> | null
  /**
   * The filter to search for the EmailVerificationRequest to update in case it exists.
   */
  where: Prisma.EmailVerificationRequestWhereUniqueInput
  /**
   * In case the EmailVerificationRequest found by the `where` argument doesn't exist, create a new EmailVerificationRequest with this data.
   */
  create: Prisma.XOR<Prisma.EmailVerificationRequestCreateInput, Prisma.EmailVerificationRequestUncheckedCreateInput>
  /**
   * In case the EmailVerificationRequest was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EmailVerificationRequestUpdateInput, Prisma.EmailVerificationRequestUncheckedUpdateInput>
}

/**
 * EmailVerificationRequest delete
 */
export type EmailVerificationRequestDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerificationRequest
   */
  select?: Prisma.EmailVerificationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerificationRequest
   */
  omit?: Prisma.EmailVerificationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationRequestInclude<ExtArgs> | null
  /**
   * Filter which EmailVerificationRequest to delete.
   */
  where: Prisma.EmailVerificationRequestWhereUniqueInput
}

/**
 * EmailVerificationRequest deleteMany
 */
export type EmailVerificationRequestDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailVerificationRequests to delete
   */
  where?: Prisma.EmailVerificationRequestWhereInput
  /**
   * Limit how many EmailVerificationRequests to delete.
   */
  limit?: number
}

/**
 * EmailVerificationRequest without action
 */
export type EmailVerificationRequestDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerificationRequest
   */
  select?: Prisma.EmailVerificationRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerificationRequest
   */
  omit?: Prisma.EmailVerificationRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationRequestInclude<ExtArgs> | null
}
