// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskPriority {
  Low
  Mid
  High
}

enum TaskStatus {
  Open
  Pending
  InReview
  Closed
}

enum Tag {
  Bug
  Feature
  Improvement
  Task
  Documentation
  Enhancement
  Hotfix
  Optimization
  Research
  Chore
  Meeting
  Admin
  Finance
  Personal
  Health
  Event
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  username      String
  passwordHash  String
  emailVerified Boolean   @default(false)
  totpKey       Bytes?
  recoveryCode  Bytes
  createdAt     DateTime  @default(now())
  lastLogin     DateTime?

  sessions              Session[]
  emailVerificationReqs EmailVerificationRequest[]
  passwordResetSessions PasswordResetSession[]

  teams       Team[]
  teamsLeader Team[] @relation("TeamLeader")
  tasks       Task[]

  @@index([email])
}

model Team {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())

  teamLeaderId Int
  teamLeader   User   @relation("TeamLeader", fields: [teamLeaderId], references: [id])
  users        User[]
  tasks        Task[]
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  teaser      String
  description String
  dueDate     DateTime
  priority    TaskPriority
  tags        Tag[]
  status      TaskStatus

  userId Int?
  teamId Int?
  user   User? @relation(fields: [userId], references: [id])
  team   Team? @relation(fields: [teamId], references: [id])
}

model Session {
  id                String   @id
  userId            Int
  expiresAt         DateTime
  twoFactorVerified Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
}

model EmailVerificationRequest {
  id        String   @id
  userId    Int
  email     String
  code      String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model PasswordResetSession {
  id                String   @id
  userId            Int
  email             String
  code              String
  expiresAt         DateTime
  emailVerified     Boolean  @default(false)
  twoFactorVerified Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
}
